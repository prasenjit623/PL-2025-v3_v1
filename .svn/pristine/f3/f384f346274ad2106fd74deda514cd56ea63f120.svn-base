package model.AM;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import model.AM.common.Recommendation_AM;

import model.ROVO.SearchRecommendationRoVoImpl;

import model.VO.BookingCustomer_VOImpl;
import model.VO.BookingDetail_VOImpl;
import model.VO.BookingHeader_VOImpl;
import model.VO.Booking_Milestone_VOImpl;
import model.VO.PropertyMaster_VOImpl;
import model.VO.PropertyUnits_VOImpl;
import model.VO.Receipt_VOImpl;
import model.VO.RecommendHeader_VOImpl;

import oracle.jbo.JboException;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jul 09 12:47:49 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class Recommendation_AMImpl extends ApplicationModuleImpl implements Recommendation_AM {
    /**
     * This is the default constructor (do not remove).
     */
    public Recommendation_AMImpl() {
    }

    /**
     * Container's getter for Booking_Milestone_VO1.
     * @return Booking_Milestone_VO1
     */
    public ViewObjectImpl getBooking_Milestone_VO1() {
        return (ViewObjectImpl)findViewObject("Booking_Milestone_VO1");
    }

    /**
     * Container's getter for RecommendHeader_VO1.
     * @return RecommendHeader_VO1
     */
    public RecommendHeader_VOImpl getRecommendHeader_VO1() {
        return (RecommendHeader_VOImpl)findViewObject("RecommendHeader_VO1");
    }

    /**
     * Container's getter for RecommendDetail_VO1.
     * @return RecommendDetail_VO1
     */
    public ViewObjectImpl getRecommendDetail_VO1() {
        return (ViewObjectImpl)findViewObject("RecommendDetail_VO1");
    }

    /**
     * Container's getter for RecommendOtherCharges_VO2.
     * @return RecommendOtherCharges_VO2
     */
    public ViewObjectImpl getRecommendOtherCharges_VO2() {
        return (ViewObjectImpl)findViewObject("RecommendOtherCharges_VO2");
    }

    /**
     * Container's getter for Booking_Milestone_VO2.
     * @return Booking_Milestone_VO2
     */
    public ViewObjectImpl getBooking_Milestone_VO2() {
        return (ViewObjectImpl)findViewObject("Booking_Milestone_VO2");
    }

    /**
     * Container's getter for RecommendHeader_VO2.
     * @return RecommendHeader_VO2
     */
    public RecommendHeader_VOImpl getRecommendHeader_VO2() {
        return (RecommendHeader_VOImpl)findViewObject("RecommendHeader_VO2");
    }

    /**
     * Container's getter for Receipt_VO1.
     * @return Receipt_VO1
     */
    public ViewObjectImpl getReceipt_VO1() {
        return (ViewObjectImpl)findViewObject("Receipt_VO1");
    }

    /**
     * Container's getter for Booking_Milestone_VO3.
     * @return Booking_Milestone_VO3
     */
    public ViewObjectImpl getBooking_Milestone_VO3() {
        return (ViewObjectImpl)findViewObject("Booking_Milestone_VO3");
    }

    /**
     * Container's getter for PropertyMaster_VO1.
     * @return PropertyMaster_VO1
     */
    public PropertyMaster_VOImpl getPropertyMaster_VO1() {
        return (PropertyMaster_VOImpl)findViewObject("PropertyMaster_VO1");
    }

    /**
     * Container's getter for getFunctionCodeROVO1.
     * @return getFunctionCodeROVO1
     */
    public ViewObjectImpl getgetFunctionCodeROVO1() {
        return (ViewObjectImpl)findViewObject("getFunctionCodeROVO1");
    }

    /**
     * Container's getter for BookingDetail_VO1.
     * @return BookingDetail_VO1
     */
    public ViewObjectImpl getBookingDetail_VO1() {
        return (ViewObjectImpl)findViewObject("BookingDetail_VO1");
    }

    /**
     * Container's getter for BookingCustomer_VO1.
     * @return BookingCustomer_VO1
     */
    public BookingCustomer_VOImpl getBookingCustomer_VO1() {
        return (BookingCustomer_VOImpl)findViewObject("BookingCustomer_VO1");
    }

    /**
     * Container's getter for BookingDetail_VO2.
     * @return BookingDetail_VO2
     */
    public ViewObjectImpl getBookingDetail_VO2() {
        return (ViewObjectImpl)findViewObject("BookingDetail_VO2");
    }

    /**
     * Container's getter for Booking_Recommendation_VL2.
     * @return Booking_Recommendation_VL2
     */
    public ViewLinkImpl getBooking_Recommendation_VL2() {
        return (ViewLinkImpl)findViewLink("Booking_Recommendation_VL2");
    }

    /**
     * Container's getter for RecommendHeader_Detail_VL1.
     * @return RecommendHeader_Detail_VL1
     */
    public ViewLinkImpl getRecommendHeader_Detail_VL1() {
        return (ViewLinkImpl)findViewLink("RecommendHeader_Detail_VL1");
    }

    /**
     * Container's getter for RecommendHeader_OtherCharges_VL2.
     * @return RecommendHeader_OtherCharges_VL2
     */
    public ViewLinkImpl getRecommendHeader_OtherCharges_VL2() {
        return (ViewLinkImpl)findViewLink("RecommendHeader_OtherCharges_VL2");
    }

    /**
     * Container's getter for Booking_Recommendation_VL1.
     * @return Booking_Recommendation_VL1
     */
    public ViewLinkImpl getBooking_Recommendation_VL1() {
        return (ViewLinkImpl)findViewLink("Booking_Recommendation_VL1");
    }

    /**
     * Container's getter for Recom_Rec_VL1.
     * @return Recom_Rec_VL1
     */
    public ViewLinkImpl getRecom_Rec_VL1() {
        return (ViewLinkImpl)findViewLink("Recom_Rec_VL1");
    }

    /**
     * Container's getter for Booking_Recommendation_VL3.
     * @return Booking_Recommendation_VL3
     */
    public ViewLinkImpl getBooking_Recommendation_VL3() {
        return (ViewLinkImpl)findViewLink("Booking_Recommendation_VL3");
    }

    /**
     * Container's getter for BookingDtl_Recommendation_VL1.
     * @return BookingDtl_Recommendation_VL1
     */
    public ViewLinkImpl getBookingDtl_Recommendation_VL1() {
        return (ViewLinkImpl)findViewLink("BookingDtl_Recommendation_VL1");
    }
    
    public String InvokeReceiptStatus(String bookid,
                                         String milesid) {
                            oracle.jbo.domain.Number p_bookid= new oracle.jbo.domain.Number();//func_id.toString()
        try {
            p_bookid = new oracle.jbo.domain.Number(bookid.toString());
        } catch (SQLException e) {
        }
        oracle.jbo.domain.Number p_milesid=new oracle.jbo.domain.Number();
                 
            //java.math.BigDecimal bi1 = new java.math.BigDecimal("300000001727604");

        try {
            p_milesid = new oracle.jbo.domain.Number(milesid.toString());
        } catch (SQLException e) {
        }
        String stmt1 =
                //"xxpm_util_package.get_install_status (?,?,?,?,?); end;";
            
                " begin \n" +
                            "             xxpm_util_package.get_install_status(:p_booking_id,:p_milestone_id ,:x_status,:x_err_code,:x_err_msg);\n" +
                            "             END;";
            CallableStatement cst = null;
            try {
                cst = this.getDBTransaction().createCallableStatement(stmt1, 0);
                cst.setObject("p_booking_id", p_bookid);
                cst.setObject("p_milestone_id", p_milesid);
                cst.registerOutParameter("x_status", Types.VARCHAR);
                cst.registerOutParameter("x_err_code", Types.VARCHAR);
                cst.registerOutParameter("x_err_msg", Types.VARCHAR);
                cst.executeUpdate();
                System.out.println("CHECK" + cst.getString("x_status"));
                return cst.getString("x_status");
            } catch (SQLException e) {
                System.err.println("ERROR" + e);
                throw new JboException(e.getMessage());
            } finally {
                if (cst != null) {
                    try {
                        cst.close();
                    } catch (SQLException e) {
                        return e.toString();
                    }
                }
            }
        }
    
    
    public String InvokeReceiptAmnValidate(String bookid,
                                         String milesid) {
                            oracle.jbo.domain.Number p_bookid= new oracle.jbo.domain.Number();//func_id.toString()
        try {
            p_bookid = new oracle.jbo.domain.Number(bookid.toString());
        } catch (SQLException e) {
        }
        oracle.jbo.domain.Number p_milesid=new oracle.jbo.domain.Number();
                 
            //java.math.BigDecimal bi1 = new java.math.BigDecimal("300000001727604");

        try {
            p_milesid = new oracle.jbo.domain.Number(milesid.toString());
        } catch (SQLException e) {
        }
        String stmt1 =
                //"xxpm_util_package.get_install_status (?,?,?,?,?); end;";
            
                " begin \n" +
                            "             xxpm_util_package.get_rem_installment_amount(:p_booking_id,:p_milestone_id ,:x_amount,:x_err_code,:x_err_msg);\n" +
                            "             END;";
            CallableStatement cst = null;
            try {
                cst = this.getDBTransaction().createCallableStatement(stmt1, 0);
                cst.setObject("p_booking_id", p_bookid);
                cst.setObject("p_milestone_id", p_milesid);
                cst.registerOutParameter("x_amount", Types.VARCHAR);
                cst.registerOutParameter("x_err_code", Types.VARCHAR);
                cst.registerOutParameter("x_err_msg", Types.VARCHAR);
                cst.executeUpdate();
                System.out.println("CHECK" + cst.getString("x_amount"));
                return cst.getString("x_amount");
            } catch (SQLException e) {
                System.err.println("ERROR" + e);
                throw new JboException(e.getMessage());
            } finally {
                if (cst != null) {
                    try {
                        cst.close();
                    } catch (SQLException e) {
                        return e.toString();
                    }
                }
            }
        }
    
    public String ReviseRecommendation(String recomNo,
                                            String userId) {
                               
           
           String stmt1 =
                   //"xxpm_util_package.get_install_status (?,?,?,?,?); end;";
               
                   " begin \n" +
                               "             xxpm_recommend_rev_pkg.revise_recommend(:p_offer_num,:p_user_id ,:p_err_code,:p_err_msg);\n" +
                               "             END;";
               CallableStatement cst = null;
               try {
                   cst = this.getDBTransaction().createCallableStatement(stmt1, 0);
                   cst.setObject("p_offer_num", recomNo);
                   cst.setObject("p_user_id", userId);
                   
                   cst.registerOutParameter("p_err_code", Types.VARCHAR);
                   cst.registerOutParameter("p_err_msg", Types.VARCHAR);
                   cst.executeUpdate();
                   System.out.println("CHECK" + cst.getString("p_err_msg"));
                   return cst.getString("p_err_msg");
               } catch (SQLException e) {
                   System.err.println("ERROR" + e);
                   throw new JboException(e.getMessage());
               } finally {
                   if (cst != null) {
                       try {
                           cst.close();
                       } catch (SQLException e) {
                           return e.toString();
                       }
                   }
               }
           }




    public String InvokeSumofRceiptAmount(String bookid
                                             ) {
                /**
                 * Passing recommendid in the name of bookingId, as per latest changes in DB table
                 */
                                oracle.jbo.domain.Number p_bookid= new oracle.jbo.domain.Number();//func_id.toString()
            try {
                p_bookid = new oracle.jbo.domain.Number(bookid.toString());
            } catch (SQLException e) {
            }
            
            String stmt1 =
                    //"xxpm_util_package.get_install_status (?,?,?,?,?); end;";
                
                    " begin \n" +
                                "             xxpl_property_lease_pkg.validate_installment_amount(:b_bookingid,:p_err_code,:p_err_msg);\n" +
                                "             END;";
                CallableStatement cst = null;
                try {
                    cst = this.getDBTransaction().createCallableStatement(stmt1, 0);
                    cst.setObject("b_bookingid", p_bookid);
     
                    cst.registerOutParameter("p_err_code", Types.VARCHAR);
                    cst.registerOutParameter("p_err_msg", Types.VARCHAR);
                    cst.executeUpdate();
               
                    return cst.getString("p_err_msg");
                } catch (SQLException e) {
                    System.err.println("ERROR" + e);
                    throw new JboException(e.getMessage());
                } finally {
                    if (cst != null) {
                        try {
                            cst.close();
                        } catch (SQLException e) {
                            return e.toString();
                        }
                    }
                }
            }
        






    /**
     * Container's getter for RecommendHeader_VO3.
     * @return RecommendHeader_VO3
     */
    public RecommendHeader_VOImpl getRecommendHeader_VO3() {
        return (RecommendHeader_VOImpl)findViewObject("RecommendHeader_VO3");
    }

    /**
     * Container's getter for Receipt_VO2.
     * @return Receipt_VO2
     */
    public ViewObjectImpl getReceipt_VO2() {
        return (ViewObjectImpl)findViewObject("Receipt_VO2");
    }

    /**
     * Container's getter for getApprovalHistoryROVo1.
     * @return getApprovalHistoryROVo1
     */
    public ViewObjectImpl getgetApprovalHistoryROVo1() {
        return (ViewObjectImpl)findViewObject("getApprovalHistoryROVo1");
    }

    /**
     * Container's getter for RecommendationApprovalVL1.
     * @return RecommendationApprovalVL1
     */
    public ViewLinkImpl getRecommendationApprovalVL1() {
        return (ViewLinkImpl)findViewLink("RecommendationApprovalVL1");
    }

    /**
     * Container's getter for BookingHeader_VO1.
     * @return BookingHeader_VO1
     */
    public BookingHeader_VOImpl getBookingHeader_VO1() {
        return (BookingHeader_VOImpl)findViewObject("BookingHeader_VO1");
    }

    /**
     * Container's getter for SearchRecommendationRoVo1.
     * @return SearchRecommendationRoVo1
     */
    public ViewObjectImpl getSearchRecommendationRoVo1() {
        return (ViewObjectImpl)findViewObject("SearchRecommendationRoVo1");
    }

    /**
     * Container's getter for RecommendationDuplicate_ROVO1.
     * @return RecommendationDuplicate_ROVO1
     */
    public ViewObjectImpl getRecommendationDuplicate_ROVO1() {
        return (ViewObjectImpl)findViewObject("RecommendationDuplicate_ROVO1");
    }


    /**
     * Container's getter for Receipt_VO3.
     * @return Receipt_VO3
     */
    public Receipt_VOImpl getReceipt_VO3() {
        return (Receipt_VOImpl)findViewObject("Receipt_VO3");
    }

    /**
     * Container's getter for ReceiptDtlVO1.
     * @return ReceiptDtlVO1
     */
    public ViewObjectImpl getReceiptDtlVO1() {
        return (ViewObjectImpl)findViewObject("ReceiptDtlVO1");
    }

    /**
     * Container's getter for ReceiptHdr_Dtl_VL1.
     * @return ReceiptHdr_Dtl_VL1
     */
    public ViewLinkImpl getReceiptHdr_Dtl_VL1() {
        return (ViewLinkImpl)findViewLink("ReceiptHdr_Dtl_VL1");
    }
    //auto create lease transaction
        public String autoLeaseLA(String recomNo,String userId)
        {
            String flag="null";
            CallableStatement cs=this.getDBTransaction().createCallableStatement("{call auto_create_pkg.AUTOCREATE_LA(?,?,?,?)}",1);
            try {
                cs.setString(1,recomNo);
                cs.setString(2,userId);
                cs.registerOutParameter(3,Types.VARCHAR);
                cs.registerOutParameter(4,Types.VARCHAR);
                cs.execute();
           
              flag=cs.getString(4).toString();
            } catch (SQLException e) {
            }
            return flag;
        }
    //auto create OC transaction
        public String autoCreateOC(String leaseNo,String userId)
        {
            String flag="null";
            CallableStatement cs=this.getDBTransaction().createCallableStatement("{call auto_create_pkg.AUTOCREATE_OC(?,?,?,?)}",1);
            try {
                cs.setString(1,leaseNo);
                cs.setString(2,userId);
                cs.registerOutParameter(3,Types.VARCHAR);
                cs.registerOutParameter(4,Types.VARCHAR);
                cs.execute();
           
              flag=cs.getString(4).toString();
            } catch (SQLException e) {
            }
            return flag;
        }
        
    //Direct rejection from draft
        public String directRejectionFromDraft(String rcId,String userId,String funcId,String reason)
        {
            String flag="null";
            CallableStatement cs=this.getDBTransaction().createCallableStatement("{call XXFND_UTIL_PKG.DIRECT_REJECTION(?,?,?,?,?,?)}",1);
            try {
                cs.setString(1,rcId);
                cs.setString(2,userId);
                cs.setString(3,funcId);
                cs.setString(4,reason);
                cs.registerOutParameter(5,Types.VARCHAR);
                cs.registerOutParameter(6,Types.VARCHAR);
                cs.execute();
           
              flag=cs.getString(6).toString();
            } catch (SQLException e) {
            }
            return flag;
        }
    //Direct to draft
            public String directToDraft(String rcId,String userId,String funcId,String reason)
            {
                String flag="null";
                CallableStatement cs=this.getDBTransaction().createCallableStatement("{call XXFND_UTIL_PKG.DIRECT_TO_DRAFT(?,?,?,?,?,?)}",1);
                try {
                    cs.setString(1,rcId);
                    cs.setString(2,userId);
                    cs.setString(3,funcId);
                    cs.setString(4,reason);
                    cs.registerOutParameter(5,Types.VARCHAR);
                    cs.registerOutParameter(6,Types.VARCHAR);
                    cs.execute();
               
                  flag=cs.getString(6).toString();
                } catch (SQLException e) {
                }
                return flag;
            }
    //change payment plan
        public String paymentPlanChange(String bkId,String mileHrdId,String userName)
        {
            String flag="null";
            CallableStatement cs=this.getDBTransaction().createCallableStatement("{call auto_create_pkg.CHANGE_PAYMENT_PLAN(?,?,?,?,?)}",1);
            try {
                cs.setString(1,bkId);
                cs.setString(2,mileHrdId);
                cs.setString(3,userName);
                cs.registerOutParameter(4,Types.VARCHAR);
                cs.registerOutParameter(5,Types.VARCHAR);
                cs.execute();
           
              flag=cs.getString(5).toString();
            } catch (SQLException e) {
            }
            return flag;
        }
    //submit for approval
        public String submitRcForAppr(String rcId)
        {
            String flag="null";
            CallableStatement cs=this.getDBTransaction().createCallableStatement("{call NEW_APPROVAL_FLOW_PKG.SUBMIT_FOR_APR_RC(?,?,?)}",1);
            try {
                cs.setString(1,rcId);
                cs.registerOutParameter(2,Types.VARCHAR);
                cs.registerOutParameter(3,Types.VARCHAR);
                cs.execute();
           
              flag=cs.getString(3).toString();
            } catch (SQLException e) {
            }
            return flag;
        }
    //Respose of approval
        public String responseRcForAppr(String rcId,String reason,String apr_rej)
        {
            String flag="null";
            CallableStatement cs=this.getDBTransaction().createCallableStatement("{call NEW_APPROVAL_FLOW_PKG.RESPONSE_FOR_APR_RC(?,?,?,?,?)}",1);
            try {
                cs.setString(1,rcId);
                cs.setString(2,reason);
                cs.setString(3,apr_rej);
                cs.registerOutParameter(4,Types.VARCHAR);
                cs.registerOutParameter(5,Types.VARCHAR);
                cs.execute();
           
              flag=cs.getString(5).toString();
            } catch (SQLException e) {
            }
            return flag;
        }
    /**
     * Container's getter for Booking_Milestone_VO4.
     * @return Booking_Milestone_VO4
     */
    public Booking_Milestone_VOImpl getBooking_Milestone_VO4() {
        return (Booking_Milestone_VOImpl)findViewObject("Booking_Milestone_VO4");
    }

    /**
     * Container's getter for Booking_Recommendation_VL4.
     * @return Booking_Recommendation_VL4
     */
    public ViewLinkImpl getBooking_Recommendation_VL4() {
        return (ViewLinkImpl)findViewLink("Booking_Recommendation_VL4");
    }

    /**
     * Container's getter for PropertyUnits_VO1.
     * @return PropertyUnits_VO1
     */
    public PropertyUnits_VOImpl getPropertyUnits_VO1() {
        return (PropertyUnits_VOImpl)findViewObject("PropertyUnits_VO1");
    }

    /**
     * Container's getter for SearchBkDtls_RoVo1.
     * @return SearchBkDtls_RoVo1
     */
    public ViewObjectImpl getSearchBkDtls_RoVo1() {
        return (ViewObjectImpl)findViewObject("SearchBkDtls_RoVo1");
    }

    /**
     * Container's getter for OfferMilestoneDetail_VO1.
     * @return OfferMilestoneDetail_VO1
     */
    public ViewObjectImpl getOfferMilestoneDetail_VO1() {
        return (ViewObjectImpl)findViewObject("OfferMilestoneDetail_VO1");
    }

    /**
     * Container's getter for getRecommendRoVo1.
     * @return getRecommendRoVo1
     */
    public ViewObjectImpl getgetRecommendRoVo1() {
        return (ViewObjectImpl)findViewObject("getRecommendRoVo1");
    }
}
